<div class="row">
	<div class="col-lg-9">
		<div class="card">
    <div class="card-body">
        <div class="mb-2"><h5 class="card-title d-inline">Khóa giảng của tôi</h5></div>
       
        <div id="list-course-grid"></div>
         <div id="view-sutdent-detail">
        	<div id="sutdent-detail-grid"></div>
        </div>
        <div id="view-module-detail">
        	<div id="module-detail-chart"></div>
        </div>
    
        
    </div>
</div>
	</div>
	<div class="col-lg-3">
		
<div class="card">
    <div class="card-body">
    		<h5 class="card-title d-inline">Nhắc nhở mới, chưa xem</h5>
    		<div>
    			<span class="text-primary">0</span>
    			<span class="pull-right"><i class="fa fa-bell text-primary" title="Toggle notifications menu"></i></span>
    			</div>
    			<span><a href="javascript:;">Xem chi tiết</a></span>

    	</div>
    </div>
    <div class="card mt-3">
    <div class="card-body">
    		<h5 class="card-title d-inline">Khóa học chưa soạn nội dung</h5>
    		<div>
    			
    				<span class="text-primary">{{#numbercourseempty}}{{course_empty}}{{/numbercourseempty}}</span>
    			
    			<span class="pull-right"><i class="fa fa-graduation-cap text-primary" title="Toggle notifications menu"></i></span>
    			</div>
    			<span><a href="javascript:;">Xem chi tiết</a></span>
    	</div>
    </div>
	</div>
</div>

<div class="card mt-3">
    <div class="card-body">
        <h5 class="card-title d-inline">Báo cáo tương tác</h5>

    	<div class="row mb-2">
        	<div class="col-md-4 mt-2">
        		<input id="list-course">
        	</div>
        	<div class="col-md-8 d-flex mt-2" id="button-group">
        		<button id="access_view" class="btn btn-secondary" style="border-radius: .25rem 0 0 0;" onclick="getChart('access_view')">Xem truy cập</button>
        		<button id="grade_view" class="btn btn-secondary" style="border-radius: 0;" onclick="getChart('grade_view')">Xem điểm số</button>
        		<button id="assignment_view" class="btn btn-secondary" style="border-radius: 0;" onclick="getChart('assignment_view')">Xem bài tập</button>
        		<button id="quiz_view" class="btn btn-secondary" style="border-radius: 0 .25rem .25rem 0;" onclick="getChart('quiz_view')">Xem bài kiểm tra</button>
        	</div>
        </div>
        <div id="report-chart"></div>
       

    	</div>
    </div>
<script type="text/javascript">
	
	$('#button-group').on('click', 'button', function(e) {
	    $(this).addClass('active').siblings().removeClass('active');
	})
	
    // load chart cho iframe từ block analytics_graphs
    const getChart = (typeChart) => {
        require(['jquery', 'core/config', 'alertjs'], ($, Config, alertify) => {
       		var courseid = $('#list-course').val();
       		if(courseid == "") {
       			alertify.warning('Chưa chọn khóa học', 'warning', 2);
       			setTimeout(function() {
       				var unActiveElement = "#button-group" + " #" + typeChart;
       				$(unActiveElement).removeClass('active');
       			}, 1000)
       		} else {
       			var url;
				if(typeChart == 'assignment_view') {
					url = Config.wwwroot + '/blocks/analytics_graphs/assign.php?id=' + courseid;
				} else if(typeChart == 'quiz_view') {
					url = Config.wwwroot + '/blocks/analytics_graphs/quiz.php?id=' + courseid;
				} else if(typeChart == 'access_view') {
					url = Config.wwwroot + '/blocks/analytics_graphs/graphresourcestartup.php?id=' + courseid;
				} else if(typeChart == 'grade_view') {
					url = Config.wwwroot + '/blocks/analytics_graphs/grades_chart.php?id=' + courseid;
				}
				var iframe = '<iframe id="iframe" src="'+url+'" width="100%" height="768" frameBorder="0"></iframe>';
	        	$('#report-chart').html(iframe);
       		}
			
		})
    }

    // show popup hiện detail list user trong khóa học
    const viewStudentDetail = function(courseId) {
    	require(['jquery', 'core/config', 'core/str', 'alertjs', 'local_newsvnr/initkendoexam'], ($, Config, Str, alertify, kendo) => {
    		var dialog = $('#view-sutdent-detail');
    		var gridStudentDetail = $('#sutdent-detail-grid');
    		var script = Config.wwwroot + '/local/newsvnr/ajax/dashboard/chart_api.php';
    		var initStudentGrid = function() {
    			var kendoConfig = {};
    			var strings = [
			    	{
			            key: 'number',
			            component: 'block_vnr_db_courseinfo_management'
			        },
			        {
			            key: 'studentcode',
			            component: 'block_vnr_db_courseinfo_management'
			        },
			        {
			            key: 'student',
			            component: 'block_vnr_db_courseinfo_management'
			        },
			        {
			            key: 'codecourse',
			            component: 'local_newsvnr'
			        },
			        {
			            key: 'coursename',
			            component: 'local_newsvnr'
			        },     
			        {
			            key: 'finishdate',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			        {
			            key: 'processfinish',
			            component: 'block_vnr_db_courseinfo_management'
			        },     
			        {
			            key: 'grade',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			    	{
			            key: 'rank',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			    	{
			            key: 'enrolledcourse',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			    	{
			            key: 'courselist',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			    	{
			            key: 'lastaccess',
			            component: 'block_vnr_db_courseinfo_management'
			    	},
			    	{
			            key: 'status',
			            component: 'theme_moove'
			    	}
			    ];
    			Str.get_strings(strings).then(function(s) {
					var settings = {			
						url: script,
						type : 'GET',
			        	dataType: "json",
			            contentType: 'application/json; charset=utf-8',
			            data: {
			            	action: 'view_students_detail',
			            	courseid: courseId,
			            	role: 5
			            }
					};
					var columns = [
						{
							// hidden: true,
			                field: "usercode",
			                title: s[1],
			                width: "80px"
						},
						{
							// hidden: true,
			                field: "studentname",
			                title: s[2],
			                width: "120px"
						},
						{
			                field: "courseid",
			                title: s[3],
			                width: "80px"
						},
						{
			                field: "coursename",
			                title: s[4],
			                width: "150px"
						},
						{
			                field: "timecompleted",
			                title: s[5],
			                width: "100px"
						},
			            {
			            	field: 'process', 
			            	template:"<div class='d-flex participants-collum'><div class='progress course'><div class='progress-bar' role='progressbar' aria-valuenow='#: process #' aria-valuemin='0' aria-valuemax='100' style='width:#: process #'></div></div><div>#: process #</div></div></div>",
			                title: s[6],
			                width: "150px"	
			            },
			            {
			                field: "gradefinal",
			                title: s[7],
			                width: "50px"
			            },
			            {
			                field: "rank",
			                title: s[8],
			                width: "50px"
			            },
			            {	
			            	template: function(e) {
			            		return e.status;
			            	},
			                field: "status",
			                title: s[12],
			                width: "100px"
			            },

					];
					if($(gridStudentDetail).data("kendoGrid")) {
						$(gridStudentDetail).data("kendoGrid").destroy();
					}
					var toolbar = ["excel","search"]
					var excel = { 
						fileName: "studentinfo.xlsx",
						allPages: true
					}
					kendoConfig.selectable = false;
					kendoConfig.toolbar = toolbar;
					kendoConfig.excel = excel;
					kendoConfig.columns = columns;
					kendoConfig.apiSettings = settings;
					var gridData = kendo.initGrid(kendoConfig);
					$(gridStudentDetail).kendoGrid(gridData);
				})
    		}
    		function onOpen(e) {
    			initStudentGrid();
    			e.sender.center();
    		}
    		dialog.kendoWindow({
	            width: "1000px",
	            title: M.util.get_string('listuser', 'theme_moove'),
	            modal: true,
	            open: onOpen,
	        });
	        dialog.data('kendoWindow').open();
    	});
    }

    var lastColor;
    function getRandColor(same, darkness) {
        //6 levels of brightness from 0 to 5, 0 being the darkest
        var rgb = [];
        if(same && lastColor) {
            rgb = lastColor;
        } else {
            rgb = [Math.random() * 256, Math.random() * 256, Math.random() * 256];
        }
        var mix = [darkness * 51, darkness * 51, darkness * 51]; //51 => 255/5
        var mixedrgb = [rgb[0] + mix[0], rgb[1] + mix[1], rgb[2] + mix[2]].map(function (x) {
            return Math.round(x / 2.0)
        })
        lastColor = rgb;
        return "rgb(" + mixedrgb.join(",") + ")";
    }

    // Show popup chart tài nguyên và hoạt động
    const viewModuleDetail = function(courseId) {

    	require(['jquery', 'core/config', 'core/str', 'alertjs', 'highcharts', 'highcharts/modules/exporting', 'highcharts/modules/accessibility', 'highcharts/modules/drilldown'], ($, Config, Str, alertify, Highcharts, ExportingModule, AccessibilityModule, DrilldownModule) => {
    		var script = Config.wwwroot + '/local/newsvnr/ajax/dashboard/chart_api.php';
    		var dialog = $('#view-module-detail');
    		var chart = 'module-detail-chart';
    		var settings = {
				type : 'GET',
	        	dataType: "json",
	            contentType: 'application/json; charset=utf-8',
	            data: {
	            	action: 'module_chart',
	            	courseid: courseId
	            }
    		}
    		$.ajax(script, settings)
    		.then(function(resp) {
    			// resp.series[0].color = getRandColor(false, 5);  
    			Highcharts.chart({
				    chart: {
				        type: 'column',
				        renderTo: chart,
				        events: {
					    	drilldown: function(e) {
					        	this.options.legend["enabled"] = true; //legend shows
					      	}
					    },
				    },
				    title: {
				        text: 'Tài nguyên và hoạt động'
				    },
				    subtitle: {
				        text: 'Khóa: ' + resp.course
				    },
				    accessibility: {
				        announceNewData: {
				            enabled: true
				        }
				    },
				    xAxis: {
				        type: 'category'
				    },
				    yAxis: {
				        min: 0,
				        title: {
				            text: 'Số lượng'
				        }
				    },
				    credits: {
	                    enabled: false
	                },
				    legend: {
				        enabled: true
				    },
				    plotOptions: {
				    	column: {
					      	dataLabels: {
					        	enabled: false
					      	},
					      	showInLegend: true
					    },
				        series: {
				            borderWidth: 0,
				            dataLabels: {
				                enabled: true,
				                format: '{point.y}'
				            }
				        }
				    },

				    tooltip: {
				        headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
				        pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b><br/>'
				    },
				    series: resp.series,
				    drilldown: {
        				series: resp.drilldown
        			}
				});
    		});
    		function onOpen(e) {
    			// initStudentGrid();
    			e.sender.center();
    		}
    		dialog.kendoWindow({
	            width: "1000px",
	            title: 'Phân bổ tài nguyên và hoạt động',
	            modal: true,
	            open: onOpen,
	        });
	        dialog.data('kendoWindow').open();
    	})
    }

</script>
{{#js}}

require.config({
    packages: [{
        name: 'highcharts',
        main: 'highcharts'
    }],
    paths: {
        // Change this to your server if you do not wish to use our CDN.
        highcharts: 'https://code.highcharts.com',
        jspicker: "//cdnjs.cloudflare.com/ajax/libs/flatpickr/4.2.3/flatpickr"
    }
});

require(
		[
			'highcharts',
	        'highcharts/modules/exporting',
	        'highcharts/modules/accessibility',
        	'highcharts/modules/drilldown',
        	'jquery', 
        	'core/config', 
        	'local_newsvnr/initkendoexam', 
        	'local_newsvnr/initkendocontrolservices', 
        	'alertjs', 
        	'core/str'
       ], function(Highcharts, ExportingModule, AccessibilityModule, DrilldownModule, $, Config, kendo, kendoService, alertify, Str) {
    "use strict";
	var gridListCourse = '#list-course-grid';
	var reportChart = 'report-chart';
	var script = Config.wwwroot + '/local/newsvnr/ajax/dashboard/chart_api.php';
	// Set lại dataSource cho kendoControl
    var newDataSource = function(settings) {
        return new kendoControl.data.DataSource({
            transport: {
                read: settings,
                parameterMap: function(options, operation) {
                    if (operation == "read") {
                        if (options["filter"]) {
                            if (options["filter"]["filters"][0])
                                options["q"] = options["filter"]["filters"][0].value;
                        }
                        return options;
                    }
                }
            },
            schema: {
                model: {
                    fields: {
                        id: {
                            type: "number"
                        },
                        fullname: {
                            type: "string"
                        },
                    }
                }
            },
            pageSize: 30,
            serverPaging: true,
            serverFiltering: true
        });
    };
    var kendoGridConfig = {};
    var settingsListCourseGrid = {
        url: script,
        type: 'GET',
        dataType: "json",
        contentType: 'application/json; charset=utf-8',
        data: {
            action: 'listcourse_grid',
        }
    };
    var listCourseColumns = [
        {
            template: function(e) {
                return e.coursename;
            },
            field: "coursename",
            title: M.util.get_string('coursename', 'theme_moove'),
            width: "300px"
        }, {
            template: function(e) {
                return e.studenttotal;
            },
            field: "studenttotal",
            title: M.util.get_string('studenttotal', 'theme_moove'),
            width: "80px"
        }, {
            field: "coursestartdate",
            title: M.util.get_string('coursestartdate', 'theme_moove'),
            width: "130px"
        }, {
            field: "courseenddate",
            title: M.util.get_string('courseenddate', 'theme_moove'),
            width: "130px"
        }, {
        	template: function(e) {
                return e.coursemodules;
            },
            field: "coursemodules",
            title: M.util.get_string('coursemodules', 'theme_moove'),
            width: "120px"
        }, {
            template: function(e) {
                return e.coursecompletion;
            },
            field: "coursecompletion",
            title: M.util.get_string('coursecompletion', 'theme_moove'),
            width: "120px"
        }, {
            template: function(e) {
                return e.status;
            },
            field: "status",
            title: M.util.get_string('status', 'theme_moove'),
            width: "150px"
        }];
    kendoGridConfig.columns = listCourseColumns;
    kendoGridConfig.apiSettings = settingsListCourseGrid;
    kendoGridConfig.toolbar = false;
    kendoGridConfig.height = 350;
	var gridData = kendo.initGrid(kendoGridConfig);
	$(gridListCourse).kendoGrid(gridData);


	function parseObjToString(obj) {
            var array = $.map(obj, function(value) {
                return [value];
            });
            return array;
        }

	var kendoDropDownConfig = {};

	var dropDownSettings = {
		url: script,
		data: {
			action: 'get_listcourse'
		}
	}

	kendoDropDownConfig.apiSettings = dropDownSettings;
	kendoDropDownConfig.value = "courseid";
	var initDropDownList = kendoService.initDropDownList(kendoDropDownConfig);
	$('#list-course').kendoDropDownList(initDropDownList);

	var chart;
	var prepareInit;
	
	
	var initChart = function(typeChart) {
		console.log(typeChart)
		var reportChartSettings = {
			type:"POST",
	        dataType:"json",
	        processData:true,
	        contenttype:"application/json",
	        data: {
	        	action: typeChart
	    	}
		}
		switch(typeChart) {
  			case "access_view":
  				
				$.ajax(script, reportChartSettings)
				.then(function(resp) {
					var groups = [];
			        var courseid = "150";
			        var coursename = "Course: Đào tạo hội nhập";
					var geral = resp.statistics;
			        var nome = "";
			        var arrayofcontents = [];
			        var nraccess_vet = [];
			        var nrntaccess_vet = [];
			        $.each(groups, function(index, group) {
			            group.numberofaccesses = [];
			            group.numberofnoaccess = [];
			            group.studentswithaccess = [];
			            group.studentswithnoaccess = [];
			            group.material = [];
			        });
			        $.each(geral, function(index, value) {
			            arrayofcontents.push(value.material);
			            //default series value
			            nraccess_vet.push(value.numberofaccesses);
			            nrntaccess_vet.push(value.numberofnoaccess);
			            $.each(groups, function(ind, group) {
			                if (group.material[index] === undefined)
			                    group.material[index] = value.material;
			                if (value.numberofaccesses > 0) {
			                    $.each(value.studentswithaccess, function(i, student) {
			                        if (group.studentswithaccess[index] === undefined)
			                            group.studentswithaccess[index] = [];
			                        if (group.numberofaccesses[index] === undefined)
			                            group.numberofaccesses[index] = 0;
			                        if (group.members.indexOf(student.userid) != -1) {
			                            group.numberofaccesses[index] += 1;
			                            group.studentswithaccess[index].push(value.studentswithaccess[i]);
			                        }
			                    });

			                } else {
			                    if (group.studentswithaccess[index] === undefined)
			                        group.studentswithaccess[index] = [];
			                    if (group.numberofaccesses[index] === undefined)
			                        group.numberofaccesses[index] = 0;
			                }
			                if (value.numberofnoaccess > 0) {
			                    $.each(value.studentswithnoaccess, function(j, student) {
			                        if (group.studentswithnoaccess[index] === undefined)
			                            group.studentswithnoaccess[index] = [];
			                        if (group.numberofnoaccess[index] === undefined)
			                            group.numberofnoaccess[index] = 0;
			                        if (group.members.indexOf(student.userid) != -1) {
			                            group.numberofnoaccess[index] += 1;
			                            group.studentswithnoaccess[index].push(value.studentswithnoaccess[j]);
			                        }
			                    });
			                } else {
			                    if (group.studentswithnoaccess[index] === undefined)
			                        group.studentswithnoaccess[index] = [];
			                    if (group.numberofnoaccess[index] === undefined)
			                        group.numberofnoaccess[index] = 0;
			                }
			            });
			        });
			        debugger
					prepareInit = {
						chart: {
	                        type: 'bar',
	                        zoomType: 'x',
	                        panning: true,
	                        panKey: 'shift',
	                        renderTo: reportChart
	                    },
	                    title: {
	                        text: ' Distribution of access to contents (resources, urls and pages)'
	                    },
	                    subtitle: {
	                        text: ' Course: Đào tạo Hội Nhập<br>Begin date: Thứ Ba, 16 Tháng Sáu 2020, 12:00 SA'
	                    },
	                    xAxis: {
	                        minRange: 1,
	                        categories: arrayofcontents,
	                        title: {
	                            text: 'Contents'
	                        },
		        
		                    plotBands: [
			                    resp.plot
			                ]
		                },
		                    
		                yAxis: {
		                    min: 0,
		                    maxPadding: 0.1,
		                    minTickInterval: 1,
		                    title: {
		                        text: 'Number of students',
		                        align: 'high'
		                    },
		                    labels: {
		                        overflow: 'justify'
		                    }
		                },
		                
		                tooltip: {
		                    valueSuffix: ' Students'
		                },
		                
		                plotOptions: {
		                    series: {
		                        cursor: 'pointer',
		                        point: {
		                            events: {
		                                click: function() {
		                                }
		                            }
		                        }
		                    },
		    
		                    bar: {
		                        dataLabels: {
		                            useHTML: this,
		                            enabled: true
		                        }
		                    }
		                },
		                legend: {
		                    layout: 'vertical',
		                    align: 'right',
		                    verticalAlign: 'top',
		                    x: -40,
		                    y: 5,
		                    floating: true,
		                    borderWidth: 1,
		                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor || '#FFFFFF'),
		                    shadow: true
		                },
		                credits: {
		                    enabled: false
		                },
		                series: [{
		                    name: 'Access',
		                    data: nraccess_vet,
		                    color: '#82FA58'
		                }, {
		                    name: 'No access',
		                    data: nrntaccess_vet,
		                    color: '#FE2E2E'
		                }]
					}
					chart = new Highcharts.Chart(prepareInit);
				});
    			break;
    		case "grade_view":
    			$.ajax(script, reportChartSettings)
    			.then(function(resp) {
    				console.log(resp)
    				debugger;
		    		prepareInit = {
						chart: {
					        type: 'bar',
					        renderTo: reportChart
					    },
					    title: {
					        text: 'Historic World Population by Region'
					    },
					    subtitle: {
					    },
					    xAxis: {
					        categories: resp.usersname,
					        scrollbar: {
					            enabled: true
					        },
					    },
					    yAxis: {
					        min: 0,
					        title: {
					            text: 'Point',
					            align: 'high'
					        },
					        labels: {
					            overflow: 'justify'
					        },

					    },
					   
					    plotOptions: {
					        bar: {
					            dataLabels: {
					                enabled: true
					            }
					        }
					    },
					   
					    credits: {
					        enabled: false
					    },
					    series: resp.modulesdata
					}
					chart = new Highcharts.Chart(prepareInit);
    			});
    			break;
    		case "assignment_view":
    			break;
    		case "quiz_view":
    			break;
	  		default:
	  			break
		}
	}	

	
});


{{/js}}